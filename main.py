from binance.client import Client
import pandas as pd
import numpy as np
import time
import requests
import os
import json
import threading
from zoneinfo import ZoneInfo
from utils import can_trade, optimize_parameters, get_strategy_params
from datetime import datetime, timedelta
from strategies import (
    ema_rsi_strategy,
    bollinger_rsi_strategy,
    macd_ema_strategy,
    vwap_rsi_strategy,
    macd_stochastic_strategy,
    bollinger_volume_strategy,
    ema_crossover_strategy
)


HISTORY_FILE = os.path.join(os.path.dirname(__file__), 'trade_history.json')


# Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TOKEN")
TELEGRAM_CHAT_ID = os.getenv("CHAT_ID")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
trade_log = []


positions_lock = threading.Lock()


# –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
next_report_time = datetime.now() + timedelta(hours=1)

symbol_precision_cache = {}

open_positions = {}  # –ü—Ä–∏–º–µ—Ä: {'BTCUSDT': {'side': 'BUY', 'entry_price': 30000.0, 'qty': 0.00033}}
START_DEPOSIT = 1000.0
TRADE_PERCENT = 5
current_deposit = START_DEPOSIT
MAX_DRAWDOWN = 0.3

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
def load_trade_history():
    global trade_log_all
    if not trade_log_all:
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except FileNotFoundError:
            return
            
        # –ü—Ä–∏–≤–æ–¥–∏–º timestamp –∏–∑ —Å—Ç—Ä–æ–∫ –≤ datetime
        for t in data:
            if isinstance(t['timestamp'], str):
                t['timestamp'] = datetime.fromisoformat(t['timestamp']).replace(tzinfo=ZoneInfo("Europe/Kyiv"))
            
        trade_log_all = data

trade_log_all = [] # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
load_trade_history()
consecutive_losses = 0
pause_until = None

LOSS_PAUSE_THRESHOLD = 3
PAUSE_DURATION_MIN = 60
pause_until = None

# üîë API –∫–ª—é—á–∏ —Å Binance Testnet
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")

client = Client(API_KEY, API_SECRET)
client.API_URL = 'https://testnet.binance.vision/api'

# üîÑ –¢–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã
#['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT', 'MATICUSDT', 'DOTUSDT', 'LINKUSDT', 'AVAXUSDT', 'XRPUSDT', 'PEPEUSDT']
raw_symbols = [
  "DOGEUSDT",
  "SHIBUSDT",
  "PEPEUSDT",
  "1000SATSUSDT",
  "VTHOUSDT",
  "TRXUSDT",
  "XRPUSDT",
  "LUNCUSDT",
  "FLOKIUSDT",
  "BTTUSDT",
  "JASMYUSDT",
  "HOTUSDT",
  "ALGOUSDT",
  "XLMUSDT",
  "ACHUSDT",
  "REEFUSDT",
  "CTSIUSDT",
  "WOOUSDT",
  "ONEUSDT",
  "CKBUSDT"
]

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ Binance
exchange_info = client.get_exchange_info()
valid_binance_symbols = {s['symbol'] for s in exchange_info['symbols']}
symbols = [s for s in raw_symbols if s in valid_binance_symbols]

interval = Client.KLINE_INTERVAL_5MINUTE
lookback = 100

REPORT_HOUR = 21  # —á–∞—Å (0‚Äì23) –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞

def save_trade_history():
    with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(trade_log_all, f, default=str, ensure_ascii=False, indent=2)
        
def next_daily_time(now=None):
    now = now or datetime.now(ZoneInfo("Europe/Kyiv"))
    # –ë–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è –≤ REPORT_HOUR
    target = now.replace(hour=REPORT_HOUR, minute=0, second=0, microsecond=0)
    if now >= target:
        target += timedelta(days=1)
    return target

def next_hourly_time(now=None):
    now = now or datetime.now(ZoneInfo("Europe/Kyiv"))
    # –ë–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è –≤ REPORT_HOUR
    target = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=3)
    return target

next_daily_report = next_hourly_time()

def send_daily_statistics():
    print(f"[DEBUG] –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ trade_log_all: {len(trade_log_all)}")
    for i, t in enumerate(trade_log_all[:5]):
        print(f"[DEBUG] Rec#{i} ‚Üí {t['timestamp']} (tzinfo={t['timestamp'].tzinfo})")
    now = datetime.now(ZoneInfo("Europe/Kyiv"))
    one_hour_ago = (now - timedelta(hours=1)).replace(tzinfo=None) 
    yesterday = (now - timedelta(hours=1)).replace(tzinfo=None)

    # ==== DEBUG ====
    print(f"[DEBUG] Now: {now!r}")
    print(f"[DEBUG] Yesterday cutoff: {yesterday!r}")
    print(f"[DEBUG] Total in trade_log_all: {len(trade_log_all)}")
    for i, t in enumerate(trade_log_all[-5:], 1):
        print(f"[DEBUG]   Rec {-i}: ts={t['timestamp']!r} tzinfo={t['timestamp'].tzinfo} result={t['result']}")
    # ================
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
    print(f"[DEBUG] one_hour_ago cutoff: {one_hour_ago!r}")
    recent = [
        t for t in trade_log_all
        ##if t['result'] in ('win','loss') and t['timestamp'] >= one_hour_ago.replace(tzinfo=None) 
    ]

    print(f"[DEBUG] After filter recent count: {len(recent)}")

    total = len(recent)
    wins  = sum(1 for t in recent if t['result']=='win')
    losses= sum(1 for t in recent if t['result']=='loss')
    profit= sum(t['profit'] for t in recent)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if total == 0:
        header = "üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á —Å–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ."
    else:
        wr = wins/total*100
        header = (
            "üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á*\n\n"
            f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total}\n"
            f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {wins}\n"
            f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losses}\n"
            f"üéØ Win Rate: {wr:.1f}%\n"
            f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${profit:.2f}\n\n"
        )

    # Win-rate –ø–æ –∞–∫—Ç–∏–≤–∞–º
    by_symbol = {}
    for t in recent:
        by_symbol.setdefault(t['symbol'], []).append(t['result'])

    symbol_lines = []
    recommendations = []
    for sym, res in by_symbol.items():
        tot = len(res)
        w   = res.count('win')
        wr_sym = w/tot*100
        symbol_lines.append(f"{sym}: {w}/{tot} ({wr_sym:.1f}%)")
        # —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–∞–º
        if wr_sym < 50:
            recommendations.append(f"‚Ä¢ {sym}: –Ω–∏–∑–∫–∏–π win rate ({wr_sym:.1f}%) ‚Äì —Å–Ω–∏–∑—å—Ç–µ –æ–±—ä—ë–º –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ.")
        elif wr_sym < 70:
            recommendations.append(f"‚Ä¢ {sym}: —Å—Ä–µ–¥–Ω–∏–π win rate ({wr_sym:.1f}%) ‚Äì –º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –æ–±—ä—ë–º–∞/–≤—Ä–µ–º–µ–Ω–∏.")

    symbol_section = "*–ü–æ –∞–∫—Ç–∏–≤–∞–º:*\n" + "\n".join(symbol_lines) + "\n\n"

    # --- –Ω–æ–≤–∞—è —Å–µ–∫—Ü–∏—è: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º ---
    by_strat = {}
    for t in recent:
        # t['strategy'] ‚Äî —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "ema_rsi,bollinger_rsi"
        for strat in t.get('strategy', '').split(','):
            strat = strat.strip()
            if not strat: 
                continue
            by_strat.setdefault(strat, []).append(t['result'])

    strat_lines = []
    for strat, res in by_strat.items():
        w   = res.count('win')
        tot = len(res)
        wr  = w/tot*100
        strat_lines.append(f"{strat}: {w}/{tot} ({wr:.1f}%)")

    # --- —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –ø–æ—Å—ã–ª–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    strat_section += "\n".join(strat_lines)


    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = header + symbol_section + strat_section

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
    if strat_section:
        message += "*–ü–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:*\n"
        message += "\n".join(strat_section)

    send_telegram_message(message)

def confidence_multiplier(buy_count, sell_count):
    count = max(buy_count, sell_count)
    if count >= 4:
        return 1.2  # –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    elif count == 3:
        return 1.1
    elif count == 2:
        return 1.0
    else:
        return 0.9  # —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª

def estimate_volatility(df):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–ª–æ —Å–≤–µ—á–µ–π / —Ü–µ–Ω—É"""
    df['body'] = abs(df['close'] - df['open'])
    avg_body = df['body'].rolling(window=20).mean().iloc[-1]
    avg_price = df['close'].rolling(window=20).mean().iloc[-1]
    return avg_body / avg_price
        
def is_trading_time():
    now = datetime.now(ZoneInfo("Europe/Kyiv")).time()
    return now >= datetime.strptime("06:00", "%H:%M").time() and now <= datetime.strptime("22:00", "%H:%M").time()
    
def is_volume_sufficient(df, min_volume_ratio=0.5):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä—ë–º —Å—Ä–µ–¥–Ω–∏–π —Ö–æ—Ç—è –±—ã –Ω–∞ min_volume_ratio"""
    df['volume'] = df['volume'].astype(float)
    avg_volume = df['volume'].rolling(window=20).mean().iloc[-2]
    current_volume = df['volume'].iloc[-1]
    return current_volume >= avg_volume * min_volume_ratio
    
def get_klines(symbol):
    klines = client.get_klines(symbol=symbol, interval=interval, limit=lookback)
    df = pd.DataFrame(klines, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_asset_volume', 'number_of_trades',
        'taker_buy_base', 'taker_buy_quote', 'ignore'
    ])
    df['high'] = df['high'].astype(float)
    df['low'] = df['low'].astype(float)
    df['open'] = df['open'].astype(float)
    df['close'] = df['close'].astype(float)
    df['volume'] = df['volume'].astype(float)
    return df

def get_symbol_winrate(symbol, min_trades=5):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç winrate —Å–∏–º–≤–æ–ª–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫"""
    trades = [t for t in trade_log if t['symbol'] == symbol and t['result'] in ('win', 'loss')]
    total = len(trades)
    if total < min_trades:
        return None  # –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
    wins = sum(1 for t in trades if t['result'] == 'win')
    return wins / total
    
def calculate_adaptive_timeout(df):
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    df['high'] = df['high'].astype(float)
    df['low'] = df['low'].astype(float)
    df['close'] = df['close'].astype(float)

    volatility = (df['high'] - df['low']) / df['close'] * 100
    avg_volatility = volatility.rolling(window=20).mean().iloc[-1]

    if avg_volatility > 3:
        return 30  # –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî –¥–µ—Ä–∂–∏–º –∫–æ—Ä–æ—Ç–∫–æ
    elif avg_volatility > 1.5:
        return 60
    else:
        return 90  # –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî –¥–æ–ª—å—à–µ –¥–µ—Ä–∂–∏–º

def format_quantity(qty):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º float –≤ —Å—Ç—Ä–æ–∫—É —Å –æ–±—ã—á–Ω–æ–π –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –∑–∞–ø–∏—Å—å—é, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è e-—Ñ–æ—Ä–º–∞—Ç
    return format(qty, 'f').rstrip('0').rstrip('.') or '0'

def execute_trade(symbol, signal, confidence = 1.0, timeout = 60):
    global current_deposit
    if symbol in open_positions:
        return  # —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è

    try:
        ticker = client.get_symbol_ticker(symbol=symbol)
        price = float(ticker['price'])

        base_percent = TRADE_PERCENT

        extra_percent= 0
        # –ü–æ–ª—É—á–∞–µ–º winrate –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        winrate = get_symbol_winrate(symbol)

        if winrate is not None:
            if winrate >= 0.7:
                extra_percent = 2  # +5% –∫ —Å—Ç–∞–≤–∫–µ
            elif winrate <= 0.5:
                extra_percent = -2  # -5% (—Å–Ω–∏–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞)
        
        adjusted_percent = min(base_percent + extra_percent + (confidence - 2) * 2, 30)
        trade_amount = current_deposit * adjusted_percent / 100

        if not can_trade(client, symbol, trade_amount):
            return

        qty = get_trade_quantity(symbol, trade_amount, price)
        qty_str=format_quantity(qty)

        exchange_info = client.get_symbol_info(symbol)                

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ USDT –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
        if signal == 'BUY':
            balance_info = client.get_asset_balance(asset='USDT')
            free_usdt = float(balance_info['free']) if balance_info else 0.0
            if free_usdt < trade_amount:
                return  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        if signal == 'BUY':
            client.order_market_buy(symbol=symbol, quantity=qty_str)
        elif signal == 'SELL':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –º–æ–Ω–µ—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π
            base_asset = symbol.replace('USDT', '')
            balance_info = client.get_asset_balance(asset=base_asset)
            free_balance = float(balance_info['free']) if balance_info else 0.0
            if free_balance < qty:
                return  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                
            client.order_market_sell(symbol=symbol, quantity=qty_str)

        print(f"‚úÖ {signal} –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {symbol} –ø–æ {price}")

        open_positions[symbol] = {
            'side': signal,
            'entry_price': price,
            'qty': qty,
            'time': datetime.now(),
            'timeout': timeout
        }

        trade_log.append({
            'symbol': symbol,
            'direction': signal,
            'amount': trade_amount,
            'entry_price': price,
            'timestamp': datetime.now(),
            'result': None,
            'profit': 0.0
        })

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ {symbol}: {e}"
        print(f"{error_message}")
        send_telegram_error(error_message)

def get_trade_quantity(symbol, trade_amount, price):
    info = client.get_symbol_info(symbol)
    step = 0.00001  # fallback

    for f in info['filters']:
        if f['filterType'] == 'LOT_SIZE':
            step = float(f['stepSize'])
            break

    raw_qty = trade_amount / price
    precision = int(round(-np.log10(step)))
    adjusted_qty = raw_qty - (raw_qty % step)
    qty = round(adjusted_qty, precision)
    return float(qty)

def check_exit_conditions():
    global current_deposit, consecutive_losses
    symbols_to_close = []

    with positions_lock:
        symbols = list(open_positions.keys())
    for symbol in symbols:
        with positions_lock:
            pos=open_positions.get(symbol)
        if not pos:
            continue
        try:
            current_price = float(client.get_symbol_ticker(symbol=symbol)['price'])
            entry = pos['entry_price']
            side = pos['side']
            qty = pos['qty']
            qty_str=format_quantity(qty)
            
            change = (current_price - entry) / entry * 100
            if side == 'SELL':
                change = -change  # –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–¥–µ–ª–æ–∫ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–Ω–∞–∫

            elapsed_minutes = (datetime.now() - pos['time']).total_seconds() / 60
            max_minutes = pos.get('timeout', 60) # –î–µ—Ñ–æ–ª—Ç 60 –º–∏–Ω
            
            if change >= 1.5 or change <= -1.0 or elapsed_minutes >= max_minutes:

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
                base_asset = symbol.replace('USDT', '')

                try:
                    balance_info = client.get_asset_balance(asset=base_asset)
                    free_balance = float(balance_info['free']) if balance_info else 0.0
                except Exception:
                    continue  # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if free_balance < qty:
                    continue
                
                close_side = 'SELL' if side == 'BUY' else 'BUY'
                if close_side == 'BUY':
                    client.order_market_buy(symbol=symbol, quantity=qty_str)
                else:
                    client.order_market_sell(symbol=symbol, quantity=qty_str)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
                for t in reversed(trade_log):
                    if t['symbol'] == symbol and t['result'] is None:
                        trade_amount = t['amount']
                        profit_usdt = round(trade_amount * change / 100, 2)
                        t['result'] = 'win' if profit_usdt > 0 else 'loss'
                        t['profit'] = profit_usdt
                        current_deposit += profit_usdt  # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç
                        result = t['result']
                        print(f"üì§ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol} ‚Äî {result.upper()} ({change:.2f}%)")

                        trade_log_all.append(t)
   
                        save_trade_history()
                        optimize_parameters(trade_log_all)
                        
                        if t['result'] == 'loss':
                            consecutive_losses += 1
                        else:
                            consecutive_losses = 0

                        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –ø–æ—Ä–æ–≥–∞ ‚Äî —Å—Ç–∞–≤–∏–º –ø–∞—É–∑—É
                        if consecutive_losses >= LOSS_PAUSE_THRESHOLD:
                            pause_until = datetime.now() + timedelta(minutes=PAUSE_DURATION_MIN)
                            print(f"‚è∏Ô∏è –°—Ç–∞–≤–∏–º –ø–∞—É–∑—É –¥–æ {pause_until.strftime('%H:%M')}, –∏–∑-–∑–∞ {consecutive_losses} —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥.")
                        break
                

                symbols_to_close.append(symbol)
                with positions_lock:
                    open_positions.pop(symbol, None)

                

        except Exception as e:
            error_message = str(e)
            if "502 Bad Gateway" in error_message:
                print(f"‚ö†Ô∏è Binance –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ {symbol} ‚Äî –æ—à–∏–±–∫–∞ 502.")
                continue  # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ {symbol}: {e}")
                send_telegram_error(error_message)


def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {'chat_id': TELEGRAM_CHAT_ID, 'text': message, 'parse_mode': 'Markdown'}
    try:
        requests.post(url, data=payload)
    except Exception as e:
       error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}"
       print(f"{error_message}")
       send_telegram_error(error_message)
        

def send_telegram_error(message):
    full_message = f"‚ùå –û—à–∏–±–∫–∞:\n{message}"
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {'chat_id': TELEGRAM_CHAT_ID, 'text': full_message}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"[Telegram Error Fail] {e}")

def start_exit_monitor(interval_seconds=60):
    def monitor():
        while True:
            check_exit_conditions()
            time.sleep(interval_seconds)
    t = threading.Thread(target=monitor, daemon=True)
    t.start()

def send_statistics():
    global trade_log,  current_deposit
    if not trade_log:
        send_telegram_message("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.")
        return

    closed_trades = [t for t in trade_log if t['result'] is not None]
    open_trades= [t for t in trade_log if t['result'] is None]
    
    total = len(closed_trades)
    wins = sum(1 for t in closed_trades if t['result'] == 'win')
    losses = sum(1 for t in closed_trades if t['result'] == 'loss')
    total_amount = sum(t['amount'] for t in closed_trades)
    total_profit = sum(t.get('profit', 0) for t in closed_trades)
    open_trades = len(open_positions)

    message = (
        "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 3 —á–∞—Å–∞*\n\n"
        f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total}\n"
        f"üì¶ –ë–∞–ª–∞–Ω—Å: ${current_deposit:.2f}\n"
        f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {wins}\n"
        f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losses}\n"
        f"üü° –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_trades}\n"
        f"üí∏ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${total_amount:.2f}\n"
        f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${total_profit:.2f}"
    )
    send_telegram_message(message)

    trade_log = [t for t in trade_log if t['result'] is None]

    load_trade_history()
    #trade_log_all.extend(closed_trades)
   
    #save_trade_history()
    #optimize_parameters(trade_log_all)

def round_step_size(symbol, qty):
    if symbol in symbol_precision_cache:
        precision = symbol_precision_cache[symbol]
    else:
        info = client.get_symbol_info(symbol)
        for f in info['filters']:
            if f['filterType'] == 'LOT_SIZE':
                step = float(f['stepSize'])
                precision = int(round(-np.log10(step)))
                symbol_precision_cache[symbol] = precision
                break
        else:
            precision = 5  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

    return round(qty, precision)


start_exit_monitor(interval_seconds=60)

# üß† –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
while True:
    if not is_trading_time():
        print("‚è≥ –í–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–∞—É–∑–∞.")
        time.sleep(60 * 5)
        continue

    print(f"\nüïí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤... {time.strftime('%Y-%m-%d %H:%M:%S')}")
    for symbol in symbols:
        try:
            if pause_until and datetime.now() < pause_until:
                print(f"‚è∏ –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –ø–∞—É–∑–µ –¥–æ {pause_until.strftime('%H:%M')}")
                time.sleep(60 * 5)
                continue
                
            df = get_klines(symbol)
            if df is None or df.empty:
                continue

            adaptive_timeout = calculate_adaptive_timeout(df)
            
            strategies = [
                ema_rsi_strategy,
                bollinger_rsi_strategy,
                macd_ema_strategy,
                vwap_rsi_strategy,
                macd_stochastic_strategy,
                bollinger_volume_strategy,
                ema_crossover_strategy
            ]

            signals = []
            for strat in strategies:
                params = get_strategy_params(strat.__name__)
                result = strat(df, params=params)
                if result:
                    print(f" üìä {symbol}: {strat.__name__} –¥–∞–ª —Å–∏–≥–Ω–∞–ª {result}")
                    signals.append(result)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            buy_count = signals.count('BUY')
            sell_count = signals.count('SELL')

            final_signal = None
            confidence = 0
            
            if buy_count >= 2 and sell_count == 0:
                final_signal = 'BUY'
            elif sell_count >= 2 and buy_count == 0:
                final_signal = 'SELL'

            if final_signal:
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                conf_mult = confidence_multiplier(buy_count, sell_count)

                # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volatility = estimate_volatility(df)
    
                # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º timeout
                new_timeout = int(adaptive_timeout * (1 + volatility))  # –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        
                # –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ execute_trade
                execute_trade(symbol, final_signal, confidence=conf_mult, timeout = min(new_timeout, 240))

        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}"
            print(f"{error_message}")
            send_telegram_error(error_message)

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–∞
    if datetime.now() >= next_report_time:
        send_statistics()
        next_report_time = datetime.now() + timedelta(hours=3)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
    now = datetime.now(ZoneInfo("Europe/Kyiv"))
    if now >= next_daily_report:
        send_daily_statistics()
        next_daily_report = next_hourly_time(now)

    check_exit_conditions()
    
    time.sleep(60 * 5)  # –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
