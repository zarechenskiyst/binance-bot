import traceback
from binance.client import Client

# –ö—ç—à –¥–ª—è minNotional
min_notional_cache = {}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
strategy_params = {
    'ema_rsi_strategy':        {'ema_period': 20, 'rsi_period': 14},
    'bollinger_rsi_strategy':  {'window': 20, 'rsi_period': 14},
    'macd_ema_strategy':       {'fast': 12, 'slow': 26, 'signal': 9},
    'vwap_rsi_strategy':       {'rsi_period': 14},
    'macd_stochastic_strategy':{},
    'bollinger_volume_strategy':{},
    'ema_crossover_strategy':  {'fast': 9, 'slow': 21}
}

def get_strategy_params(strategy_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    return strategy_params.get(strategy_name, {})
    
def can_trade(client: Client, symbol: str, trade_amount: float) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø–æ —Å–∏–º–≤–æ–ª—É, –∏—Å—Ö–æ–¥—è –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ notional (minNotional).
    """
    if symbol not in min_notional_cache:
        try:
            info = client.get_symbol_info(symbol)
            for f in info['filters']:
                if f['filterType'] == 'MIN_NOTIONAL':
                    min_notional_cache[symbol] = float(f['minNotional'])
                    break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è minNotional –¥–ª—è {symbol}: {e}")
            return False

    min_required = min_notional_cache.get(symbol, 10)

    if trade_amount < min_required:
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {symbol}: minNotional {min_required} > —Å—Ç–∞–≤–∫–∞ {trade_amount:.2f}")
        return False

    return True

def optimize_parameters(trade_history, window=50, min_winrate=0.5):
    """
    –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ `window` –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º winrate.
    –ï—Å–ª–∏ winrate –Ω–∏–∂–µ `min_winrate`, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–≥–∫–∞ –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    """
    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    closed = [t for t in trade_history if t['result'] in ('win','loss')]
    recent = closed[-window:]
    if len(recent) < window:
        return  # –µ—â—ë –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö

    wins = sum(1 for t in recent if t['result']=='win')
    wr = wins / window
    try:
    # –ï—Å–ª–∏ –ø–∞–¥–µ–Ω–∏–µ winrate ‚Äî –º–µ–Ω—è–µ–º ema_period +\- 2
        if wr < min_winrate:
            for strategy_name, params in strategy_params.items():
            # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —Å–µ–π—á–∞—Å 20, —Ç–æ –ø—Ä–æ–±—É–µ–º 22, –∏–Ω–∞—á–µ 18
                if 'ema_period' in params:
                    print(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {params['ema_period']}")
                    old = params['ema_period']
                # –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ-—á–∏—Å–ª–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
                    if not isinstance(old, (int, float)):
                        print(f"‚ö†Ô∏è –£ {name} ema_period={old!r} –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue

                    new = old + 2
                    if new > 50:
                        new = 20
                    params['ema_period'] = new
                    print(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: winrate={wr:.2f}, –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: EMA={params['ema_period']}")
                
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å RSI
                if 'rsi_period' in params:
                    params['rsi_period'] = max(8, params['rsi_period'] - 2)
                    print(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: winrate={wr:.2f}, –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: RSI={params['rsi_period']}"})
                
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        print(f"{error_message}")
        traceback.print_exc()
        

